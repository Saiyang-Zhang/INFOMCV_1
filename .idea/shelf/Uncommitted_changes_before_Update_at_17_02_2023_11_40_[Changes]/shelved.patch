Index: p1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport numpy as np\r\nimport glob\r\nimport win32api,win32con\r\nimport time\r\n\r\nw = 9\r\nh = 6\r\n# termination criteria, maximum number of loops = 30 and maximum error tolerance = 0.001\r\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)\r\n# checkerboard points in the world coordinate system 3D\r\nobjp = np.zeros((w * h, 3), np.float32)\r\nobjp[:, :2] = np.mgrid[0:w, 0:h].T.reshape(-1, 2)\r\n\r\n# checkerboard points in the world coordinate system 2D, grid length = 23mm\r\nsubWorkCoord = np.zeros((w * h, 2), np.float32)\r\nsubWorkCoord[:, :2] = np.mgrid[0:w, 0:h].T.reshape(-1, 2) * 23\r\nsubWorkCoord = np.array(subWorkCoord, np.float32)\r\n\r\n# Store the world coordinates and image coordinates of the checkerboard grid\r\nobjpoints = []  # 3d point in real world space\r\nimgpoints = []  # 2d points in image plane.\r\n\r\n# Store the mouse click number, click coordinates, manually computed image coordinates\r\nclickNum = 0\r\ncoordinates = []\r\nsubCoord = []\r\n\r\n# Display the coordinates of the points clicked on the image and find all points\r\ndef click_event(event, x, y, flags, params):\r\n    global coordinates, subCoord, clickNum\r\n    # checking for left mouse clicks\r\n    if event == cv2.EVENT_LBUTTONDOWN:\r\n        # displaying the coordinates on the image window\r\n        font = cv2.FONT_HERSHEY_SIMPLEX\r\n        # displaying the coordinates on the Shell\r\n        if clickNum < 4:\r\n            cv2.putText(params, str(x) + ',' + str(y), (x, y), font, 1, (255, 0, 0), 2)\r\n            cv2.imshow('findCorners', params)\r\n            coordinates.append([x, y])\r\n        clickNum += 1\r\n        if clickNum == 4:\r\n            subcoordinates(params)\r\n\r\n    # checking for right mouse clicks\r\n    if event == cv2.EVENT_RBUTTONDOWN:\r\n        # displaying the coordinates on the image window\r\n        font = cv2.FONT_HERSHEY_SIMPLEX\r\n        # displaying the coordinates on the Shell\r\n        if clickNum < 4:\r\n            b = params[y, x, 0]\r\n            g = params[y, x, 1]\r\n            r = params[y, x, 2]\r\n            cv2.putText(params, str(b) + ',' + str(g) + ',' + str(r), (x, y), font, 1, (255, 255, 0), 2)\r\n            cv2.imshow('findCorners', params)\r\n            cv2.circle(params, (x, y), 5, (0, 255, 0), -1)\r\n            coordinates.append([x, y])\r\n        clickNum += 1\r\n        if clickNum == 4:\r\n            subcoordinates(params)\r\n\r\n# Calculate the transformation matrix and use it to find all points\r\ndef subcoordinates(img):\r\n    global coordinates, subCoord, clickNum\r\n\r\n    # compute all coordinates\r\n    worldCoord = np.array([[0,(h-1)*23], [(w-1)*23,(h-1)*23], [(w-1)*23,0], [0,0]], np.float32)\r\n    coordinates_array = np.array(coordinates, np.float32)\r\n    M = cv2.getPerspectiveTransform(worldCoord, coordinates_array)\r\n    res = cv2.perspectiveTransform(subWorkCoord.reshape(-1, 1, 2), M)\r\n\r\n    # show the chessboard grid\r\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n    corners = np.array(res, np.float32)\r\n    corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\r\n    cv2.drawChessboardCorners(img, (w, h), corners2, True)\r\n    cv2.imshow('findCorners', img)\r\n\r\n    # save the corners\r\n    objpoints.append(objp)\r\n    imgpoints.append(np.array(corners2, np.float32))\r\n\r\n    #clear the numbers\r\n    coordinates = []\r\n    subCoord = []\r\n    clickNum = 0\r\n\r\n# first run\r\ndef firstRun():\r\n    images = glob.glob('./CameraRoll/*.jpg')\r\n    i = 0\r\n    for fname in images:\r\n        img = cv2.imread(fname)\r\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n        # Find the chess board corners\r\n        ret, corners = cv2.findChessboardCorners(gray, (w, h), None)\r\n        # If found, save the information\r\n        if ret == True:\r\n            # Finding sub-pixel corners based on the original corners\r\n            corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\r\n            objpoints.append(objp)\r\n            imgpoints.append(corners2)\r\n            # Draw and display the corners\r\n            cv2.drawChessboardCorners(img, (w, h), corners2, ret)\r\n            cv2.namedWindow('findCorners', cv2.WINDOW_NORMAL)\r\n            cv2.resizeWindow('findCorners', 640, 480)\r\n            cv2.imshow('findCorners', img)\r\n            cv2.waitKey(2000)\r\n        else:\r\n            if i == 0:\r\n                win32api.MessageBox(0, \"If detect corners fail, please choose 4 corners clockwise, \"\r\n                                       \"starting from the top-left.\",\"Notice\", win32con.MB_OK)\r\n                i += 1\r\n            cv2.namedWindow('findCorners', cv2.WINDOW_NORMAL)\r\n            cv2.resizeWindow('findCorners', 640, 480)\r\n            cv2.imshow('findCorners', img)\r\n            cv2.setMouseCallback('findCorners', click_event, img)\r\n            cv2.waitKey(0)\r\n        cv2.destroyAllWindows()\r\n\r\n# second and third run\r\ndef run(round):\r\n    images = glob.glob('./CameraRoll/*.jpg')\r\n    i = 0\r\n    for fname in images:\r\n        if i < round:\r\n            img = cv2.imread(fname)\r\n            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\r\n            u, v = img.shape[:2]\r\n            # Find the chess board corners\r\n            ret, corners = cv2.findChessboardCorners(gray, (w, h), None)\r\n            # If found, save the information\r\n            if ret == True:\r\n                # Finding sub-pixel corners based on the original corners\r\n                corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\r\n                objpoints.append(objp)\r\n                imgpoints.append(corners2)\r\n                # Draw and display the corners\r\n                cv2.drawChessboardCorners(img, (w, h), corners2, ret)\r\n                cv2.namedWindow('findCorners', cv2.WINDOW_NORMAL)\r\n                cv2.resizeWindow('findCorners', 640, 480)\r\n                cv2.imshow('findCorners', img)\r\n                cv2.waitKey(2000)\r\n                i += 1\r\n        else:\r\n            break\r\n        cv2.destroyAllWindows()\r\n    return gray, u, v\r\n\r\n# offline phase\r\ndef offline():\r\n    firstRun()  # run1\r\n    run(10)     # run2\r\n    gray, u, v = run(5)     # run3\r\n    # Calibration\r\n    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)\r\n    print(len(objpoints), len(imgpoints) )\r\n    # Save camera parameters to an NPY file\r\n    np.save('./CameraParams/mtx.npy', mtx)\r\n    np.save('./CameraParams/dist.npy', dist)\r\n    np.save('./CameraParams/rvecs.npy', rvecs)\r\n    np.save('./CameraParams/tvecs.npy', tvecs)\r\n\r\n# draw contours online\r\ndef draw(img, imgpts):\r\n    imgpts = np.int32(imgpts).reshape(-1, 2)\r\n    # draw ground floor in green\r\n    img = cv2.drawContours(img, [imgpts[:4]], -1, (0, 255, 0), -2)\r\n    # draw pillars in blue color\r\n    for i, j in zip(range(4), range(4, 8)):\r\n        img = cv2.line(img, tuple(imgpts[i]), tuple(imgpts[j]), (255), 2)\r\n    # draw top layer in red color\r\n    img = cv2.drawContours(img, [imgpts[4:]], -1, (0, 0, 255), 2)\r\n    return img\r\n\r\ndef shadow(img, shadowpts):\r\n\r\n    return\r\n\r\n# Online phase: Capture picture using webcam\r\ndef online(mtx, dist, rvecs, tvecs):\r\n    camera = cv2.VideoCapture(0)\r\n\r\n    objp = np.zeros((w * h, 3), np.float32)\r\n    objp[:, :2] = np.mgrid[0:w, 0:h].T.reshape(-1, 2)\r\n    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)\r\n\r\n    light = np.float32([[9, 4, -6]])\r\n    #light = light.reshape((1, 1, 2))\r\n\r\n    while True:\r\n        ret, frame = camera.read()\r\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\r\n        # Find the chess board corners\r\n        ret, corners = cv2.findChessboardCorners(gray, (w, h), None,\r\n                                                 cv2.CALIB_CB_ADAPTIVE_THRESH+cv2.CALIB_CB_NORMALIZE_IMAGE+cv2.CALIB_CB_FAST_CHECK)\r\n\r\n        if ret == True:\r\n            corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\r\n            # Find the rotation and translation vectors.\r\n            ret, rvecs, tvecs = cv2.solvePnP(objp, corners2, mtx, dist)\r\n\r\n            t = (time.time()%12)/6\r\n            var1 = np.cos(t*np.pi)*np.sqrt(2)\r\n            var2 = np.sin(t*np.pi)*np.sqrt(2)\r\n            axis = np.float32([[1+var1, 1+var2, 0], [1-var2, 1+var1, 0], [1-var1, 1-var2, 0], [1+var2, 1-var1, 0], [1+var1, 1+var2, -2], [1-var2, 1+var1, -2], [1-var1, 1-var2, -2], [1+var2, 1-var1, -2]])\r\n            # project 3D points to image plane\r\n            imgpts, jac = cv2.projectPoints(axis, rvecs, tvecs, mtx, dist)\r\n            draw(frame, imgpts)\r\n\r\n            shadowpts = np\r\n\r\n            # Draw and display the corners\r\n            cv2.drawChessboardCorners(frame, (w, h), corners2, ret)\r\n\r\n        cv2.imshow('Camera', frame)\r\n        k = cv2.waitKey(1)\r\n        if k == 27 or cv2.getWindowProperty('Camera', cv2.WND_PROP_VISIBLE) < 1:   #press Esc to quit\r\n            break\r\n\r\n    camera.release()\r\n    cv2.destroyAllWindows()\r\n\r\nif __name__ == \"__main__\":\r\n    #offline()\r\n    mtx = np.load('./CameraParams/mtx.npy')\r\n    dist = np.load('./CameraParams/dist.npy')\r\n    rvecs = np.load('./CameraParams/rvecs.npy')\r\n    tvecs = np.load('./CameraParams/tvecs.npy')\r\n    online(mtx, dist, rvecs, tvecs)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p1.py b/p1.py
--- a/p1.py	(revision 161ae41cda19c2c2c55d53b93a625c457a8f2386)
+++ b/p1.py	(date 1676630404789)
@@ -89,6 +89,7 @@
 def firstRun():
     images = glob.glob('./CameraRoll/*.jpg')
     i = 0
+    imgNum = 0
     for fname in images:
         img = cv2.imread(fname)
         gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
@@ -102,10 +103,11 @@
             imgpoints.append(corners2)
             # Draw and display the corners
             cv2.drawChessboardCorners(img, (w, h), corners2, ret)
-            cv2.namedWindow('findCorners', cv2.WINDOW_NORMAL)
-            cv2.resizeWindow('findCorners', 640, 480)
-            cv2.imshow('findCorners', img)
-            cv2.waitKey(2000)
+            #cv2.namedWindow('findCorners', cv2.WINDOW_NORMAL)
+            #cv2.resizeWindow('findCorners', 640, 480)
+            #cv2.imshow('findCorners', img)
+            cv2.imwrite("./ChessboardCornersImg/Run1/image{}.jpg".format(imgNum), img)
+            #cv2.waitKey(2000)
         else:
             if i == 0:
                 win32api.MessageBox(0, "If detect corners fail, please choose 4 corners clockwise, "
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c992ddfe-e5f2-454c-8992-6d6a3d539d24\" name=\"Changes\" comment=\"Lots of change\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraParams/dist.npy\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraParams/dist.npy\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraParams/mtx.npy\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraParams/mtx.npy\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraParams/rvecs.npy\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraParams/rvecs.npy\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraParams/tvecs.npy\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraParams/tvecs.npy\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraRoll/1.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraRoll/1.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraRoll/10.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraRoll/10.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraRoll/20.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraRoll/20.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraRoll/21.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CameraRoll/21.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/CameraRoll/tilted.jpg\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/p1.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/p1.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Lb2zrSlceJLGGw10eR25qOfbdg\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c992ddfe-e5f2-454c-8992-6d6a3d539d24\" name=\"Changes\" comment=\"\" />\r\n      <created>1676125726642</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1676125726642</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Function added\">\r\n      <created>1676174302893</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676174302893</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"manual corner annotation?\">\r\n      <created>1676252256624</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676252256624</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;UndistortImage/0.jpg\">\r\n      <created>1676252458180</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676252458180</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;UndistortImage/0.jpg\">\r\n      <created>1676412605447</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676412605447</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;UndistortImage/0.jpg\">\r\n      <created>1676412623926</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676412623926</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Lots of change\">\r\n      <created>1676412760272</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676412760272</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Lots of change\">\r\n      <created>1676412813338</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676412813338</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Function added\" />\r\n    <MESSAGE value=\"manual corner annotation?\" />\r\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;UndistortImage/0.jpg\" />\r\n    <MESSAGE value=\"Lots of change\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Lots of change\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 161ae41cda19c2c2c55d53b93a625c457a8f2386)
+++ b/.idea/workspace.xml	(date 1676630344299)
@@ -1,17 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="c992ddfe-e5f2-454c-8992-6d6a3d539d24" name="Changes" comment="Lots of change">
+    <list default="true" id="c992ddfe-e5f2-454c-8992-6d6a3d539d24" name="Changes" comment="fix linear interpolation">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/CameraParams/dist.npy" beforeDir="false" afterPath="$PROJECT_DIR$/CameraParams/dist.npy" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/CameraParams/mtx.npy" beforeDir="false" afterPath="$PROJECT_DIR$/CameraParams/mtx.npy" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/CameraParams/rvecs.npy" beforeDir="false" afterPath="$PROJECT_DIR$/CameraParams/rvecs.npy" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/CameraParams/tvecs.npy" beforeDir="false" afterPath="$PROJECT_DIR$/CameraParams/tvecs.npy" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/CameraRoll/1.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/CameraRoll/1.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/CameraRoll/10.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/CameraRoll/10.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/CameraRoll/20.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/CameraRoll/20.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/CameraRoll/21.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/CameraRoll/21.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/CameraRoll/tilted.jpg" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/p1.py" beforeDir="false" afterPath="$PROJECT_DIR$/p1.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -96,7 +91,21 @@
       <option name="project" value="LOCAL" />
       <updated>1676412813338</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="fix linear interpolation">
+      <created>1676558995507</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1676558995507</updated>
+    </task>
+    <task id="LOCAL-00009" summary="fix linear interpolation">
+      <created>1676559116133</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1676559116133</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -115,6 +124,7 @@
     <MESSAGE value="manual corner annotation?" />
     <MESSAGE value="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;UndistortImage/0.jpg" />
     <MESSAGE value="Lots of change" />
-    <option name="LAST_COMMIT_MESSAGE" value="Lots of change" />
+    <MESSAGE value="fix linear interpolation" />
+    <option name="LAST_COMMIT_MESSAGE" value="fix linear interpolation" />
   </component>
 </project>
\ No newline at end of file
